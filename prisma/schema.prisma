// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  userName      String? @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support

  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  userFeturedMovies UserFeturedMovies[]
  comments          Comments[]
  notifications     Notification[]
  
}

model Account {
  id                       String  @id @default(auto()) @map("_id") @db.ObjectId
  userId                   String  @db.ObjectId
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.String
  refresh_token_expires_in Int?
  access_token             String? @db.String
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.String
  session_state            String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
// model Authenticator {
//   credentialID         String  @id @map("_id")
//   userId               String  @db.ObjectId
//   providerAccountId    String
//   credentialPublicKey  String
//   counter              Int
//   credentialDeviceType String
//   credentialBackedUp   Boolean
//   transports           String?

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([userId, credentialID])
// }
model UserFeturedMovies {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  user     User     @relation(fields: [userId], references: [id])
  userId   String   @unique @db.ObjectId
  movieIds String[]
}

model Comments {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  parentId      String?         @db.ObjectId
  userId        String         @db.ObjectId
  text          String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  commentedBy   User           @relation(fields: [userId], references: [id])
  upVotes       Int?           @default(0)
  downVotes     Int?           @default(0)
  movieId       String         @unique
  MovieComments MovieComments? @relation(fields: [movieId], references: [movieId])
}

model MovieComments {
  id       String     @id @default(auto()) @map("_id") @db.ObjectId
  movieId  String     @unique
  comments Comments[]
}


model Notification {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  userId    String    @db.ObjectId
  user      User      @relation(fields: [userId], references: [id])
  type      String
  message   String
  commentId String    @db.ObjectId
  createdAt DateTime  @default(now())
  seen      Boolean   @default(false)
}

model Subscription {
  id        Int      @id  @map("_id")
  endpoint  String
  p256dh    String
  auth      String
  createdAt DateTime @default(now())
}

model Tracker {
  id       String      @id @default(auto()) @map("_id") @db.ObjectId
  tracker String
}